B -> aA
B -> bA"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract the edges
edgesCompleted <- str_extract_all(string, "[A-Z] -> [a-z][A-Z]")[[1]]
edgesFinal  <- str_extract_all(string, "([A-Z] -> [a-z][^A-Z])|[A-Z] -> [a-z](?!.*[A-Z])")[[1]]
edgesFinalZ <- str_replace_all(edgesFinal, "(?<=[a-z])(?!$)|(?<=[a-z])$", "Z")
stringUpdated <- append(edgesCompleted, edgesFinalZ)
nodes <- unlist(str_extract_all(stringUpdated, "[A-Z]"))
edge.labels <- unlist(str_extract_all(stringUpdated, "[a-z]"))
g <- graph(nodes, directed = TRUE)
uniqueNodes <- unique(nodes)
nodeTypes <- c()
for(node in uniqueNodes){
if(node == "S"){
nodeTypes <- nodeTypes %>% append(1)
} else if (node == "Z"){
nodeTypes <- nodeTypes %>% append(3)
}
else {
nodeTypes <- nodeTypes %>% append(2)
}
}
if (!("S" %in% uniqueNodes)) {
nodeTypes <- append(nodeTypes, 1)
}
string <- "A -> aB
A -> bB
A -> a
B -> aA
B -> bA"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract the edges
edgesCompleted <- str_extract_all(string, "[A-Z] -> [a-z][A-Z]")[[1]]
edgesFinal  <- str_extract_all(string, "([A-Z] -> [a-z][^A-Z])|[A-Z] -> [a-z](?!.*[A-Z])")[[1]]
edgesFinalZ <- str_replace_all(edgesFinal, "(?<=[a-z])(?!$)|(?<=[a-z])$", "Z")
stringUpdated <- append(edgesCompleted, edgesFinalZ)
nodes <- unlist(str_extract_all(stringUpdated, "[A-Z]"))
edge.labels <- unlist(str_extract_all(stringUpdated, "[a-z]"))
g <- graph(nodes, directed = TRUE)
uniqueNodes <- unique(nodes)
nodeTypes <- c()
if (!("S" %in% uniqueNodes)) {
nodeTypes <- append(nodeTypes, 1)
}
for(node in uniqueNodes){
if(node == "S"){
nodeTypes <- nodeTypes %>% append(1)
} else if (node == "Z"){
nodeTypes <- nodeTypes %>% append(3)
}
else {
nodeTypes <- nodeTypes %>% append(2)
}
}
node.types <- nodeTypes
mapping.colors <- c("green","white", "red")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.9)
set.seed(12)
plot(g, edge.arrow.size = 0.5, vertex.label.cex = 0.8, vertex.size = 35,
vertex.frame.color = "gray", vertex.label.color = "black",
edge.label = edge.labels, vertex.color = node.colors, edge.curved = curves)
# Clear
rm(list = ls())
source("C:/Users/moypi/Documents/R/Implem_ Metodos_Comp/Proyect3.R", echo=TRUE)
string <- "A -> aB
A -> bB
A -> a
B -> aA
B -> bA"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract the edges
edgesCompleted <- str_extract_all(string, "[A-Z] -> [a-z][A-Z]")[[1]]
edgesFinal  <- str_extract_all(string, "([A-Z] -> [a-z][^A-Z])|[A-Z] -> [a-z](?!.*[A-Z])")[[1]]
edgesFinalZ <- str_replace_all(edgesFinal, "(?<=[a-z])(?!$)|(?<=[a-z])$", "Z")
stringUpdated <- append(edgesCompleted, edgesFinalZ)
nodes <- unlist(str_extract_all(stringUpdated, "[A-Z]"))
edge.labels <- unlist(str_extract_all(stringUpdated, "[a-z]"))
g <- graph(nodes, directed = TRUE)
uniqueNodes <- unique(nodes)
nodeTypes <- c()
if (!("S" %in% uniqueNodes)) {
nodeTypes <- append(nodeTypes, 1)
}
for(node in uniqueNodes){
if(node == "S"){
nodeTypes <- nodeTypes %>% append(1)
} else if (node == "Z"){
nodeTypes <- nodeTypes %>% append(3)
}
else {
nodeTypes <- nodeTypes %>% append(2)
}
}
node.types <- nodeTypes
mapping.colors <- c("green","white", "red")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.9)
set.seed(12)
plot(g, edge.arrow.size = 0.5, vertex.label.cex = 0.8, vertex.size = 35,
vertex.frame.color = "gray", vertex.label.color = "black",
edge.label = edge.labels, vertex.color = node.colors, edge.curved = curves)
string <- "A -> aB
A -> bB
A -> a
B -> aA
B -> bA"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract the edges
edgesCompleted <- str_extract_all(string, "[A-Z] -> [a-z][A-Z]")[[1]]
edgesFinal  <- str_extract_all(string, "([A-Z] -> [a-z][^A-Z])|[A-Z] -> [a-z](?!.*[A-Z])")[[1]]
edgesFinalZ <- str_replace_all(edgesFinal, "(?<=[a-z])(?!$)|(?<=[a-z])$", "Z")
stringUpdated <- append(edgesCompleted, edgesFinalZ)
nodes <- unlist(str_extract_all(stringUpdated, "[A-Z]"))
edge.labels <- unlist(str_extract_all(stringUpdated, "[a-z]"))
g <- graph(nodes, directed = TRUE)
uniqueNodes <- unique(nodes)
nodeTypes <- c()
for(node in uniqueNodes){
if(node == "S"){
nodeTypes <- nodeTypes %>% append(1)
} else if (node == "Z"){
nodeTypes <- nodeTypes %>% append(3)
}
else {
nodeTypes <- nodeTypes %>% append(2)
}
}
class(nodeTypes)
string <- "A -> aB
A -> bB
A -> a
B -> aA
B -> bA"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract the edges
edgesCompleted <- str_extract_all(string, "[A-Z] -> [a-z][A-Z]")[[1]]
edgesFinal  <- str_extract_all(string, "([A-Z] -> [a-z][^A-Z])|[A-Z] -> [a-z](?!.*[A-Z])")[[1]]
edgesFinalZ <- str_replace_all(edgesFinal, "(?<=[a-z])(?!$)|(?<=[a-z])$", "Z")
stringUpdated <- append(edgesCompleted, edgesFinalZ)
nodes <- unlist(str_extract_all(stringUpdated, "[A-Z]"))
edge.labels <- unlist(str_extract_all(stringUpdated, "[a-z]"))
g <- graph(nodes, directed = TRUE)
uniqueNodes <- unique(nodes)
nodeTypes <- c()
for(node in uniqueNodes){
if(node == "S"){
nodeTypes <- nodeTypes %>% append(1)
} else if (node == "Z"){
nodeTypes <- nodeTypes %>% append(3)
}
else {
nodeTypes <- nodeTypes %>% append(2)
}
}
if (!("S" %in% uniqueNodes)) {
nodeTypes <- nodeTypes[-1]
nodeTypes <- append(nodeTypes, 1, after= 0)
}
node.types <- nodeTypes
mapping.colors <- c("green","white", "red")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.9)
set.seed(12)
plot(g, edge.arrow.size = 0.5, vertex.label.cex = 0.8, vertex.size = 35,
vertex.frame.color = "gray", vertex.label.color = "black",
edge.label = edge.labels, vertex.color = node.colors, edge.curved = curves)
runApp('R/Implem_ Metodos_Comp/dashboard2')
string <- "A -> aB
A -> bB
A -> a
B -> aA
B -> bA"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract the edges
edgesCompleted <- str_extract_all(string, "[A-Z] -> [a-z][A-Z]")[[1]]
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract the edges
edgesCompleted <- str_extract_all(string, "[A-Z] -> [a-z][A-Z]")[[1]]
edgesFinal  <- str_extract_all(string, "([A-Z] -> [a-z][^A-Z])|[A-Z] -> [a-z](?!.*[A-Z])")[[1]]
string <- "A -> aB
A -> bB
A -> a
B -> aA
B -> bA"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract the edges
edgesCompleted <- str_extract_all(string, "[A-Z] -> [a-z][A-Z]")[[1]]
edgesFinal  <- str_extract_all(string, "([A-Z] -> [a-z][^A-Z])|[A-Z] -> [a-z](?!.*[A-Z])")[[1]]
edgesFinalZ <- str_replace_all(edgesFinal, "(?<=[a-z])(?!$)|(?<=[a-z])$", "Z")
shiny::runApp('R/Implem_ Metodos_Comp/dashboard2')
library(igraph)
library(stringr)
library(magrittr)
## Input user example
string2 <- "S -> aA
B -> a
S -> bB
A -> bB
A -> c
B -> c"
string <- "A -> aB
A -> bB
A -> a
B -> aA
B -> bA"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract the edges
edgesCompleted <- str_extract_all(string, "[A-Z] -> [a-z][A-Z]")[[1]]
string2 <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,Z.,-)
(A,Z.,-)
(E,A,a)
(D,A,a)
(B,C.,-)"
source("C:/Users/moypi/Documents/R/Implem_ Metodos_Comp/Proyect3Opcional.R", echo=TRUE)
shiny::runApp('R/Implem_ Metodos_Comp/dashboard2')
library(igraph)
library(stringr)
library(magrittr)
## Input user example
string2 <- "S -> aA
B -> a
S -> bB
A -> bB
A -> c
B -> c"
string <- "A -> aB
A -> bB
A -> a
B -> aA
B -> bA"
library(igraph)
library(stringr)
library(magrittr)
## Input user example
string2 <- "S -> aA
B -> a
S -> bB
A -> bB
A -> c
B -> c"
string <- "A -> aB
A -> bB
A -> a
B -> aA
B -> bA"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract the edges
edgesCompleted <- str_extract_all(string, "[A-Z] -> [a-z][A-Z]")[[1]]
bB
edgesFinal  <- str_extract_all(string, "([A-Z] -> [a-z][^A-Z])|[A-Z] -> [a-z](?!.*[A-Z])")[[1]]
edgesFinalZ <- str_replace_all(edgesFinal, "(?<=[a-z])(?!$)|(?<=[a-z])$", "Z")
stringUpdated <- append(edgesCompleted, edgesFinalZ)
nodes <- unlist(str_extract_all(stringUpdated, "[A-Z]"))
edge.labels <- unlist(str_extract_all(stringUpdated, "[a-z]"))
g <- graph(nodes, directed = TRUE)
uniqueNodes <- unique(nodes)
nodeTypes <- c()
for(node in uniqueNodes){
if(node == "S"){
nodeTypes <- nodeTypes %>% append(1)
} else if (node == "Z"){
nodeTypes <- nodeTypes %>% append(3)
}
else {
nodeTypes <- nodeTypes %>% append(2)
}
}
if (!("S" %in% uniqueNodes)) {
nodeTypes <- nodeTypes[-1]
nodeTypes <- append(nodeTypes, 1, after= 0)
}
node.types <- nodeTypes
mapping.colors <- c("green","white", "red")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.9)
set.seed(12)
plot(g, edge.arrow.size = 0.5, vertex.label.cex = 0.8, vertex.size = 35,
vertex.frame.color = "gray", vertex.label.color = "black",
edge.label = edge.labels, vertex.color = node.colors, edge.curved = curves)
shiny::runApp('R/Implem_ Metodos_Comp/dashboard2')
source("C:/Users/moypi/Documents/R/Implem_ Metodos_Comp/Proyect3Opcional.R", echo=TRUE)
library(igraph)
library(stringr)
# Input user example
string <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,C.,-)"
string2 <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,Z.,-)
(A,Z.,-)
(E,A,a)
(D,A,a)
(B,C.,-)"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract edges
edgesCompleted <- str_extract_all(string, "\\([A-Z],[A-Z],[a-z]\\)")[[1]]
edgesFinal <- str_extract_all(string, "\\([A-Z],[A-Z]\\.,([a-z]|.)\\)")[[1]]
string <- append(edgesCompleted, edgesFinal)
## Extract nodes
coupleNodesCompleted <- unlist(str_extract_all(edgesCompleted, "[A-Z]"))
coupleNodesFinal <- unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]"))
nodesFinal <- gsub("\\.","",unique(unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]\\."))))
nodes <- append(coupleNodesCompleted, nodesFinal)
uniqueNodes <- unique(nodes)
## Number of nodes
nNodesCompleted <- length(unique(unlist(str_extract_all(edgesCompleted, "(?!S)[A-Z]"))))
nNodesFinal <- length(gsub("\\.","",unique(unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]\\.")))))
## Alphabet
uniqueAlphabet <- unique(unlist(str_extract_all(string, "[a-z]")))
nAlphabet <- length(uniqueAlphabet)
## ------------------ Testing -------------------------
(sum(grepl(paste0("S,[A-Z].?,", "[a]"), string)) > 0)
grepl(paste0("S,[A-Z].?,", "[a]"),string)
sum(grepl("[A-Z],C.,[a]", string)) & sum(grepl("[A-Z],C.,[b]", string))
nodeTypes <- c()
for(node in uniqueNodes){
if(node == "S"){
for (alphabet in uniqueAlphabet){
if((sum(grepl("S,[A-Z].?,[a]", string)) & sum(grepl("S,[A-Z].?,[b]", string))) == TRUE){
nodeTypes <- nodeTypes %>% append(1)
} else {
nodeTypes <- nodeTypes %>% append(4)
}
}
} else if (node %in% nodesFinal){
if((sum(grepl("[A-Z],C.,[a]", string)) & sum(grepl("[A-Z],C.,[b]", string))) == TRUE){
nodeTypes <- nodeTypes %>% append(3)
} else {
nodeTypes <- nodeTypes %>% append(4)
}
}
else {
nodeTypes <- nodeTypes %>% append(2)
}
}
node.types <- nodeTypes
g <- graph(nodes, directed = TRUE)
edge.labels <- gsub("-","λ",unlist(str_extract_all(string, "[a-z]|-")))
mapping.colors <- c("green","white", "red", "yellow")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.8)
set.seed(10)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
shiny::runApp('R/Implem_ Metodos_Comp/dashboard2')
library(igraph)
library(stringr)
# Input user example
string <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,C.,-)"
string2 <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,Z.,-)
(A,Z.,-)
(E,A,a)
(D,A,a)
(B,C.,-)"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract edges
edgesCompleted <- str_extract_all(string, "\\([A-Z],[A-Z],[a-z]\\)")[[1]]
edgesFinal <- str_extract_all(string, "\\([A-Z],[A-Z]\\.,([a-z]|.)\\)")[[1]]
string <- append(edgesCompleted, edgesFinal)
## Extract nodes
coupleNodesCompleted <- unlist(str_extract_all(edgesCompleted, "[A-Z]"))
coupleNodesFinal <- unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]"))
nodesFinal <- gsub("\\.","",unique(unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]\\."))))
nodes <- append(coupleNodesCompleted, nodesFinal)
uniqueNodes <- unique(nodes)
## Number of nodes
nNodesCompleted <- length(unique(unlist(str_extract_all(edgesCompleted, "(?!S)[A-Z]"))))
nNodesFinal <- length(gsub("\\.","",unique(unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]\\.")))))
## Alphabet
uniqueAlphabet <- unique(unlist(str_extract_all(string, "[a-z]")))
nAlphabet <- length(uniqueAlphabet)
## ------------------ Testing -------------------------
(sum(grepl(paste0("S,[A-Z].?,", "[a]"), string)) > 0)
grepl(paste0("S,[A-Z].?,", "[a]"),string)
sum(grepl("[A-Z],C.,[a]", string)) & sum(grepl("[A-Z],C.,[b]", string))
nodeTypes <- c()
for(node in uniqueNodes){
if(node == "S"){
for (alphabet in uniqueAlphabet){
if((sum(grepl("S,[A-Z].?,[a]", string)) & sum(grepl("S,[A-Z].?,[b]", string))) == TRUE){
nodeTypes <- nodeTypes %>% append(1)
} else {
nodeTypes <- nodeTypes %>% append(4)
}
}
} else if (node %in% nodesFinal){
if((sum(grepl("[A-Z],C.,[a]", string)) & sum(grepl("[A-Z],C.,[b]", string))) == TRUE){
nodeTypes <- nodeTypes %>% append(3)
} else {
nodeTypes <- nodeTypes %>% append(4)
}
}
else {
nodeTypes <- nodeTypes %>% append(2)
}
}
node.types <- nodeTypes
g <- graph(nodes, directed = TRUE)
edge.labels <- gsub("-","λ",unlist(str_extract_all(string, "[a-z]|-")))
mapping.colors <- c("green","white", "red", "yellow")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.8)
set.seed(10)
node.types <- nodeTypes
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
nodeTypes <- nodeTypes[-1]
node.types <- nodeTypes
g <- graph(nodes, directed = TRUE)
edge.labels <- gsub("-","λ",unlist(str_extract_all(string, "[a-z]|-")))
mapping.colors <- c("green","white", "red", "yellow")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.8)
set.seed(10)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
library(igraph)
library(stringr)
# Input user example
string <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,C.,-)
"
string2 <- "(S,B,a)
(S,A,b)
(B,A,b)
(B,C.,-)
(C,B,a)
(C,B,b)"
# Formatted data
string <- str_replace_all(string, "(\n)|([:space:]*\n)", " ")
## Extract edges
edgesCompleted <- str_extract_all(string, "\\([A-Z],[A-Z],[a-z]\\)")[[1]]
edgesFinal <- str_extract_all(string, "\\([A-Z],[A-Z]\\.,([a-z]|.)\\)")[[1]]
string <- append(edgesCompleted, edgesFinal)
## Extract nodes
coupleNodesCompleted <- unlist(str_extract_all(edgesCompleted, "[A-Z]"))
coupleNodesFinal <- unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]"))
nodesFinal <- gsub("\\.","",unique(unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]\\."))))
nodes <- append(coupleNodesCompleted, nodesFinal)
uniqueNodes <- unique(nodes)
## Number of nodes
nNodesCompleted <- length(unique(unlist(str_extract_all(edgesCompleted, "(?!S)[A-Z]"))))
nNodesFinal <- length(gsub("\\.","",unique(unlist(str_extract_all(edgesFinal, "(?!S)[A-Z]\\.")))))
## Alphabet
uniqueAlphabet <- unique(unlist(str_extract_all(string, "[a-z]")))
nAlphabet <- length(uniqueAlphabet)
## ------------------ Testing -------------------------
(sum(grepl(paste0("S,[A-Z].?,", "[a]"), string)) > 0)
grepl(paste0("S,[A-Z].?,", "[a]"),string)
sum(grepl("[A-Z],C.,[a]", string)) & sum(grepl("[A-Z],C.,[b]", string))
nodeTypes <- c()
for(node in uniqueNodes){
if(node == "S"){
for (alphabet in uniqueAlphabet){
if((sum(grepl("S,[A-Z].?,[a]", string)) & sum(grepl("S,[A-Z].?,[b]", string))) == TRUE){
nodeTypes <- nodeTypes %>% append(1)
} else {
nodeTypes <- nodeTypes %>% append(4)
}
}
} else if (node %in% nodesFinal){
if((sum(grepl("[A-Z],C.,[a]", string)) & sum(grepl("[A-Z],C.,[b]", string))) == TRUE){
nodeTypes <- nodeTypes %>% append(3)
} else {
nodeTypes <- nodeTypes %>% append(4)
}
}
else {
nodeTypes <- nodeTypes %>% append(2)
}
}
node.types <- nodeTypes
g <- graph(nodes, directed = TRUE)
edge.labels <- gsub("-","λ",unlist(str_extract_all(string, "[a-z]|-")))
mapping.colors <- c("green","white", "red", "yellow")
node.colors <- mapping.colors[node.types]
curves <- curve_multiple(g, start = 0.8)
set.seed(10)
plot(g, edge.arrow.size=.3, vertex.label.cex=0.8, vertex.size=35,vertex.frame.color="gray", vertex.label.color="black",  edge.label = edge.labels, vertex.color = node.colors, edge.curved=curves )
# Clear
rm(list = ls())
source("C:/Users/moypi/Documents/R/Implem_ Metodos_Comp/Proyect3Opcional.R", echo=TRUE)
source("C:/Users/moypi/Documents/R/Implem_ Metodos_Comp/Proyect3Opcional.R", echo=TRUE)
source("C:/Users/moypi/Documents/R/Implem_ Metodos_Comp/Proyect3Opcional.R", echo=TRUE)
source("C:/Users/moypi/Documents/R/Implem_ Metodos_Comp/Proyect3Opcional.R", echo=TRUE)
shiny::runApp('R/Implem_ Metodos_Comp/dashboard2')
shiny::runApp('R/Implem_ Metodos_Comp/dashboard2')
